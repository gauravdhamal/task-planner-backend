package com.task.planner.exceptions;

import java.time.LocalDateTime;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.NoHandlerFoundException;

@ControllerAdvice
public class GlobalExceptionHandler {

	/**
	 * 
	 * @param methodArgumentNotValidException
	 * @return
	 */
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<MyErrorDetails> myMethodArgumentNotValidExceptionHandler(
			MethodArgumentNotValidException methodArgumentNotValidException) {
		System.out.println("MethodArgumentNotValidException handler.");
		MyErrorDetails error = new MyErrorDetails(LocalDateTime.now(),
				methodArgumentNotValidException.getBindingResult().getFieldError().getDefaultMessage(),
				"Validation error");
		return new ResponseEntity<MyErrorDetails>(error, HttpStatus.BAD_REQUEST);
	}

	@ExceptionHandler(IllegalArgumentException.class)
	public ResponseEntity<MyErrorDetails> myIllegalArgumentExceptionHandler(
			IllegalArgumentException illegalArgumentException, WebRequest webRequest) {
		System.out.println("IllegalArgumentException handler.");
		MyErrorDetails error = new MyErrorDetails(LocalDateTime.now(), illegalArgumentException.getMessage(),
				webRequest.getDescription(false));
		return new ResponseEntity<MyErrorDetails>(error, HttpStatus.BAD_REQUEST);
	}

	@ExceptionHandler(NoHandlerFoundException.class)
	public ResponseEntity<MyErrorDetails> noHandlerFoundExceptionHandler(NoHandlerFoundException e,
			WebRequest webRequest) {
		System.out.println("NoHandlerFoundException handler.");
		MyErrorDetails err = new MyErrorDetails(LocalDateTime.now(), e.getMessage(), webRequest.getDescription(false));
		return new ResponseEntity<MyErrorDetails>(err, HttpStatus.BAD_REQUEST);
	}

	@ExceptionHandler(Exception.class)
	public ResponseEntity<MyErrorDetails> myExceptionHandler(Exception exp, WebRequest webRequest) {
		System.out.println("Exception handler.");
		MyErrorDetails error = new MyErrorDetails(LocalDateTime.now(), exp.getMessage(),
				webRequest.getDescription(false));
		return new ResponseEntity<MyErrorDetails>(error, HttpStatus.BAD_REQUEST);
	}

}
