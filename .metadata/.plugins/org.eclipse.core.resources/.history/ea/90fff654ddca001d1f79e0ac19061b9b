package com.task.planner.configurations;

import java.io.File;

import org.apache.catalina.connector.Connector;
import org.apache.coyote.http11.Http11NioProtocol;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringBootConfiguration;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
import org.springframework.context.annotation.Bean;

@SpringBootConfiguration
public class WebServerConfig {

	@Value("${server.http.port}")
	private int httpPort;

	@Value("${server.ssl.key-store}")
	private String keyStorePath;

	@Value("${server.ssl.key-store-password}")
	private String keyStorePassword;

	@Value("${server.ssl.key-alias}")
	private String keyAlias;

	@Value("${server.ssl.key-password}")
	private String keyPassword;

	@Bean
	public ServletWebServerFactory servletContainer() {
		TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();
		tomcat.addAdditionalTomcatConnectors(createSslConnector());
		return tomcat;
	}

	private Connector createSslConnector() {
		Connector connector = new Connector("org.apache.coyote.http11.Http11NioProtocol");
		Http11NioProtocol protocol = (Http11NioProtocol) connector.getProtocolHandler();
		try {
			connector.setScheme("https");
			connector.setSecure(true);
			connector.setPort(8443);
			protocol.setSSLEnabled(true);
			protocol.setKeystoreFile(new File(keyStorePath).getAbsolutePath());
			protocol.setKeystorePass(keyStorePassword);
			protocol.setKeyAlias(keyAlias);
			protocol.setKeyPass(keyPassword);
			return connector;
		} catch (Exception ex) {
			throw new IllegalStateException("Failed to configure SSL connector", ex);
		}
	}
}